# ========================================
# üß™ AUTH SERVICE - TEST RUNNER
# ========================================
# Script d'ex√©cution automatis√©e des tests Auth
# Incluant tests unitaires, int√©gration et rapports

param(
    [Parameter(Position=0)]
    [ValidateSet("all", "unit", "integration", "coverage")]
    [string]$TestType = "all",
    
    [switch]$GenerateCoverage,
    [switch]$GenerateReport,
    [switch]$Verbose,
    [switch]$WatchMode
)

# Configuration
$ErrorActionPreference = "Stop"
$ProgressPreference = "SilentlyContinue"

$AUTH_ROOT = "c:\Users\HP\Documents\projets\NiesPro"
$TESTS_ROOT = "$AUTH_ROOT\tests\Auth"
$UNIT_PROJECT = "$TESTS_ROOT\Unit\Auth.Tests.Unit.csproj"
$INTEGRATION_PROJECT = "$TESTS_ROOT\Integration\Auth.Tests.Integration.csproj"

# Couleurs pour output
$ColorSuccess = "Green"
$ColorWarning = "Yellow" 
$ColorError = "Red"
$ColorInfo = "Cyan"
$ColorHeader = "Magenta"

function Write-Header {
    param([string]$Title)
    Write-Host "`nüß™ $Title" -ForegroundColor $ColorHeader
    Write-Host ("=" * ($Title.Length + 3)) -ForegroundColor $ColorHeader
}

function Write-Success {
    param([string]$Message)
    Write-Host "‚úÖ $Message" -ForegroundColor $ColorSuccess
}

function Write-Warning {
    param([string]$Message)
    Write-Host "‚ö†Ô∏è $Message" -ForegroundColor $ColorWarning
}

function Write-Error {
    param([string]$Message)
    Write-Host "‚ùå $Message" -ForegroundColor $ColorError
}

function Write-Info {
    param([string]$Message)
    Write-Host "‚ÑπÔ∏è $Message" -ForegroundColor $ColorInfo
}

function Test-Prerequisites {
    Write-Header "V√©rification des pr√©requis"
    
    # V√©rifier .NET CLI
    try {
        $dotnetVersion = dotnet --version
        Write-Success ".NET CLI d√©tect√© : v$dotnetVersion"
    }
    catch {
        Write-Error ".NET CLI non trouv√©. Veuillez installer .NET 8.0+"
        exit 1
    }
    
    # V√©rifier les projets de test
    if (-not (Test-Path $UNIT_PROJECT)) {
        Write-Error "Projet de tests unitaires non trouv√© : $UNIT_PROJECT"
        exit 1
    }
    Write-Success "Projet de tests unitaires trouv√©"
    
    if (-not (Test-Path $INTEGRATION_PROJECT)) {
        Write-Warning "Projet de tests d'int√©gration non trouv√© : $INTEGRATION_PROJECT"
        Write-Info "Les tests d'int√©gration seront ignor√©s"
    } else {
        Write-Success "Projet de tests d'int√©gration trouv√©"
    }
}

function Run-UnitTests {
    Write-Header "Ex√©cution des tests unitaires"
    
    $startTime = Get-Date
    
    try {
        $verbosityLevel = if ($Verbose) { "normal" } else { "minimal" }
        
        Write-Info "Compilation du projet de tests unitaires..."
        dotnet build $UNIT_PROJECT --configuration Release --verbosity $verbosityLevel
        
        Write-Info "Ex√©cution des tests unitaires..."
        if ($GenerateCoverage) {
            dotnet test $UNIT_PROJECT `
                --configuration Release `
                --no-build `
                --verbosity $verbosityLevel `
                --collect:"XPlat Code Coverage" `
                --results-directory "$TESTS_ROOT\TestResults"
        } else {
            dotnet test $UNIT_PROJECT `
                --configuration Release `
                --no-build `
                --verbosity $verbosityLevel
        }
        
        $duration = (Get-Date) - $startTime
        Write-Success "Tests unitaires termin√©s en $($duration.TotalSeconds.ToString('F1'))s"
        return $true
    }
    catch {
        $duration = (Get-Date) - $startTime
        Write-Error "√âchec des tests unitaires apr√®s $($duration.TotalSeconds.ToString('F1'))s"
        Write-Error $_.Exception.Message
        return $false
    }
}

function Run-IntegrationTests {
    Write-Header "Ex√©cution des tests d'int√©gration"
    
    if (-not (Test-Path $INTEGRATION_PROJECT)) {
        Write-Warning "Tests d'int√©gration non disponibles"
        return $true
    }
    
    $startTime = Get-Date
    
    try {
        $verbosityLevel = if ($Verbose) { "normal" } else { "minimal" }
        
        Write-Info "Compilation du projet de tests d'int√©gration..."
        dotnet build $INTEGRATION_PROJECT --configuration Release --verbosity $verbosityLevel
        
        Write-Info "Ex√©cution des tests d'int√©gration..."
        dotnet test $INTEGRATION_PROJECT `
            --configuration Release `
            --no-build `
            --verbosity $verbosityLevel
        
        $duration = (Get-Date) - $startTime
        Write-Success "Tests d'int√©gration termin√©s en $($duration.TotalSeconds.ToString('F1'))s"
        return $true
    }
    catch {
        $duration = (Get-Date) - $startTime  
        Write-Error "√âchec des tests d'int√©gration apr√®s $($duration.TotalSeconds.ToString('F1'))s"
        Write-Error $_.Exception.Message
        return $false
    }
}

function Generate-CoverageReport {
    Write-Header "G√©n√©ration du rapport de couverture"
    
    $coverageFiles = Get-ChildItem "$TESTS_ROOT\TestResults" -Recurse -Filter "coverage.cobertura.xml"
    
    if ($coverageFiles.Count -eq 0) {
        Write-Warning "Aucun fichier de couverture trouv√©"
        return
    }
    
    try {
        # Installer reportgenerator si n√©cessaire
        if (-not (Get-Command reportgenerator -ErrorAction SilentlyContinue)) {
            Write-Info "Installation de ReportGenerator..."
            dotnet tool install -g dotnet-reportgenerator-globaltool
        }
        
        $latestCoverage = $coverageFiles | Sort-Object LastWriteTime -Descending | Select-Object -First 1
        $reportDir = "$TESTS_ROOT\CoverageReport"
        
        Write-Info "G√©n√©ration du rapport HTML..."
        reportgenerator `
            -reports:$($latestCoverage.FullName) `
            -targetdir:$reportDir `
            -reporttypes:"Html;TextSummary"
        
        Write-Success "Rapport de couverture g√©n√©r√© : $reportDir\index.html"
        
        if (Test-Path "$reportDir\Summary.txt") {
            Write-Info "R√©sum√© de couverture :"
            Get-Content "$reportDir\Summary.txt" | Write-Host
        }
    }
    catch {
        Write-Error "Erreur lors de la g√©n√©ration du rapport : $($_.Exception.Message)"
    }
}

function Generate-TestReport {
    Write-Header "G√©n√©ration du rapport de test"
    
    $reportFile = "$TESTS_ROOT\Test-Report-$(Get-Date -Format 'yyyy-MM-dd').md"
    
    $report = @"
# Auth Service - Rapport de Test
*G√©n√©r√© automatiquement le $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')*

## üìä R√©sum√© Ex√©cutif

- **Service** : Auth.API
- **Date d'ex√©cution** : $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')
- **Environnement** : Test
- **Machine** : $env:COMPUTERNAME

## üß™ R√©sultats des Tests

### Tests Unitaires
- **Status** : $(if ($unitTestsSuccess) { "‚úÖ SUCC√àS" } else { "‚ùå √âCHEC" })
- **Projet** : Auth.Tests.Unit.csproj

### Tests d'Int√©gration  
- **Status** : $(if (Test-Path $INTEGRATION_PROJECT) { if ($integrationTestsSuccess) { "‚úÖ SUCC√àS" } else { "‚ùå √âCHEC" } } else { "üöß NON DISPONIBLE" })
- **Projet** : Auth.Tests.Integration.csproj

## üìà M√©triques

### Performance
- **Tests unitaires** : $unitTestDuration secondes
- **Tests d'int√©gration** : $integrationTestDuration secondes

### Qualit√©
- **Couverture de code** : $(if ($GenerateCoverage) { "G√©n√©r√©e" } else { "Non calcul√©e" })

## üìã Actions Recommand√©es

$(if (-not $unitTestsSuccess) { "- ‚ùå Corriger les tests unitaires en √©chec" } else { "- ‚úÖ Tests unitaires valid√©s" })
$(if ((Test-Path $INTEGRATION_PROJECT) -and (-not $integrationTestsSuccess)) { "- ‚ùå Corriger les tests d'int√©gration en √©chec" } elseif (-not (Test-Path $INTEGRATION_PROJECT)) { "- üöß Impl√©menter les tests d'int√©gration" } else { "- ‚úÖ Tests d'int√©gration valid√©s" })

---
*Rapport g√©n√©r√© par run-tests.ps1*
"@

    $report | Out-File -FilePath $reportFile -Encoding UTF8
    Write-Success "Rapport g√©n√©r√© : $reportFile"
}

function Show-Summary {
    Write-Header "R√©sum√© d'ex√©cution"
    
    $totalDuration = (Get-Date) - $globalStartTime
    
    Write-Info "Temps total d'ex√©cution : $($totalDuration.TotalSeconds.ToString('F1'))s"
    
    if ($unitTestsSuccess) {
        Write-Success "Tests unitaires : SUCC√àS"
    } else {
        Write-Error "Tests unitaires : √âCHEC"
    }
    
    if (Test-Path $INTEGRATION_PROJECT) {
        if ($integrationTestsSuccess) {
            Write-Success "Tests d'int√©gration : SUCC√àS"
        } else {
            Write-Error "Tests d'int√©gration : √âCHEC"
        }
    } else {
        Write-Warning "Tests d'int√©gration : NON DISPONIBLES"
    }
    
    $overallSuccess = $unitTestsSuccess -and ($integrationTestsSuccess -or (-not (Test-Path $INTEGRATION_PROJECT)))
    
    if ($overallSuccess) {
        Write-Host "`nüéâ TOUS LES TESTS SONT PASS√âS AVEC SUCC√àS ! üéØ" -ForegroundColor Green -BackgroundColor Black
    } else {
        Write-Host "`nüí• CERTAINS TESTS ONT √âCHOU√â" -ForegroundColor Red -BackgroundColor Black
        exit 1
    }
}

# ========================================
# EX√âCUTION PRINCIPALE
# ========================================

$globalStartTime = Get-Date

Write-Host @"
üß™ AUTH SERVICE TEST RUNNER
============================
Type de test : $TestType
Couverture : $(if ($GenerateCoverage) { "Activ√©e" } else { "D√©sactiv√©e" })
Rapport : $(if ($GenerateReport) { "Activ√©" } else { "D√©sactiv√©" })
Mode verbose : $(if ($Verbose) { "Activ√©" } else { "D√©sactiv√©" })
"@ -ForegroundColor $ColorHeader

# V√©rification des pr√©requis
Test-Prerequisites

# Variables pour tracking
$unitTestsSuccess = $false
$integrationTestsSuccess = $false
$unitTestDuration = 0
$integrationTestDuration = 0

# Ex√©cution des tests selon le type demand√©
switch ($TestType.ToLower()) {
    "unit" {
        $unitStart = Get-Date
        $unitTestsSuccess = Run-UnitTests
        $unitTestDuration = ((Get-Date) - $unitStart).TotalSeconds
        
        if ($GenerateCoverage) {
            Generate-CoverageReport
        }
    }
    
    "integration" {
        $integrationStart = Get-Date  
        $integrationTestsSuccess = Run-IntegrationTests
        $integrationTestDuration = ((Get-Date) - $integrationStart).TotalSeconds
    }
    
    "coverage" {
        $GenerateCoverage = $true
        $unitStart = Get-Date
        $unitTestsSuccess = Run-UnitTests  
        $unitTestDuration = ((Get-Date) - $unitStart).TotalSeconds
        
        Generate-CoverageReport
    }
    
    "all" {
        $unitStart = Get-Date
        $unitTestsSuccess = Run-UnitTests
        $unitTestDuration = ((Get-Date) - $unitStart).TotalSeconds
        
        $integrationStart = Get-Date
        $integrationTestsSuccess = Run-IntegrationTests  
        $integrationTestDuration = ((Get-Date) - $integrationStart).TotalSeconds
        
        if ($GenerateCoverage) {
            Generate-CoverageReport
        }
    }
}

# G√©n√©ration du rapport si demand√©
if ($GenerateReport) {
    Generate-TestReport
}

# Affichage du r√©sum√©
Show-Summary