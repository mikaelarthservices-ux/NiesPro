# Script de test complet pour Catalog.API
param(
    [string]$TestType = "all",
    [switch]$Coverage = $false,
    [switch]$Verbose = $false
)

Write-Host "üß™ CATALOG.API - SUITE DE TESTS COMPL√àTE" -ForegroundColor Cyan
Write-Host "=========================================" -ForegroundColor Cyan

$ErrorActionPreference = "Stop"
$testResults = @()
$totalTests = 0
$passedTests = 0
$failedTests = 0

# Configuration des chemins
$rootPath = Split-Path -Parent -Path $PSScriptRoot
$catalogRoot = Join-Path $rootPath "src\Services\Catalog"
$testsRoot = Join-Path $rootPath "tests\Catalog"

function Write-TestHeader {
    param([string]$Title)
    Write-Host ""
    Write-Host "üîç $Title" -ForegroundColor Yellow
    Write-Host ("=" * 50) -ForegroundColor Yellow
}

function Write-TestResult {
    param(
        [string]$TestName,
        [bool]$Success,
        [string]$Details = ""
    )
    
    $icon = if ($Success) { "‚úÖ" } else { "‚ùå" }
    $color = if ($Success) { "Green" } else { "Red" }
    
    Write-Host "   $icon $TestName" -ForegroundColor $color
    if ($Details) {
        Write-Host "      $Details" -ForegroundColor Gray
    }
    
    if ($Success) {
        $script:passedTests++
    } else {
        $script:failedTests++
    }
    $script:totalTests++
}

# Test 1: Compilation et build
if ($TestType -eq "all" -or $TestType -eq "build") {
    Write-TestHeader "COMPILATION ET BUILD"
    
    try {
        Write-Host "   üî® Restauration des packages..." -ForegroundColor Gray
        dotnet restore $catalogRoot --verbosity minimal
        
        Write-Host "   üî® Compilation Catalog.API..." -ForegroundColor Gray
        dotnet build $catalogRoot --no-restore --verbosity minimal
        
        Write-Host "   üî® Compilation tests unitaires..." -ForegroundColor Gray
        dotnet build "$testsRoot\Unit" --no-restore --verbosity minimal
        
        Write-Host "   üî® Compilation tests d'int√©gration..." -ForegroundColor Gray
        dotnet build "$testsRoot\Integration" --no-restore --verbosity minimal
        
        Write-TestResult "Compilation r√©ussie" $true "Tous les projets compilent sans erreur"
    }
    catch {
        Write-TestResult "Erreur de compilation" $false $_.Exception.Message
    }
}

# Test 2: Tests unitaires
if ($TestType -eq "all" -or $TestType -eq "unit") {
    Write-TestHeader "TESTS UNITAIRES"
    
    try {
        $unitTestPath = Join-Path $testsRoot "Unit"
        if (Test-Path $unitTestPath) {
            $verbosityLevel = if ($Verbose) { "normal" } else { "minimal" }
            
            if ($Coverage) {
                Write-Host "   üìä Ex√©cution avec couverture de code..." -ForegroundColor Gray
                $result = dotnet test $unitTestPath --collect:"XPlat Code Coverage" --verbosity $verbosityLevel --logger "console;verbosity=minimal"
            } else {
                $result = dotnet test $unitTestPath --verbosity $verbosityLevel --logger "console;verbosity=minimal"
            }
            
            if ($LASTEXITCODE -eq 0) {
                Write-TestResult "Tests unitaires" $true "Tous les tests unitaires passent"
            } else {
                Write-TestResult "Tests unitaires" $false "Certains tests unitaires √©chouent"
            }
        } else {
            Write-TestResult "Tests unitaires" $false "R√©pertoire des tests unitaires introuvable"
        }
    }
    catch {
        Write-TestResult "Tests unitaires" $false $_.Exception.Message
    }
}

# Test 3: V√©rification base de donn√©es
if ($TestType -eq "all" -or $TestType -eq "database") {
    Write-TestHeader "TESTS BASE DE DONN√âES"
    
    try {
        Write-Host "   üóÑÔ∏è Test de connexion MySQL..." -ForegroundColor Gray
        $dbTestResult = & "$rootPath\tools\catalog-db-inspector.ps1" -Action "test" 2>&1
        
        if ($dbTestResult -like "*Connexion r√©ussie*") {
            Write-TestResult "Connexion MySQL" $true "Base niespro_catalog accessible"
            
            Write-Host "   üóÑÔ∏è V√©rification des tables..." -ForegroundColor Gray
            $tablesResult = & "$rootPath\tools\catalog-db-inspector.ps1" -Action "tables" 2>&1
            
            if ($tablesResult -like "*categories*" -and $tablesResult -like "*products*") {
                Write-TestResult "Structure base de donn√©es" $true "Tables pr√©sentes et correctes"
            } else {
                Write-TestResult "Structure base de donn√©es" $false "Tables manquantes ou incorrectes"
            }
        } else {
            Write-TestResult "Connexion MySQL" $false "Impossible de se connecter √† la base"
        }
    }
    catch {
        Write-TestResult "Tests base de donn√©es" $false $_.Exception.Message
    }
}

# Test 4: Tests d'int√©gration API
if ($TestType -eq "all" -or $TestType -eq "integration") {
    Write-TestHeader "TESTS D'INT√âGRATION API"
    
    try {
        # V√©rifier si le service est en cours d'ex√©cution
        $serviceRunning = $false
        try {
            $response = Invoke-WebRequest -Uri "http://localhost:5003/health" -TimeoutSec 5 -UseBasicParsing
            $serviceRunning = $response.StatusCode -eq 200
        } catch {
            $serviceRunning = $false
        }
        
        if (-not $serviceRunning) {
            Write-Host "   üöÄ D√©marrage du service Catalog.API..." -ForegroundColor Gray
            $serviceProcess = Start-Process -FilePath "dotnet" -ArgumentList "run", "--project", "$catalogRoot\Catalog.API" -WindowStyle Hidden -PassThru
            
            # Attendre que le service d√©marre
            $attempts = 0
            do {
                Start-Sleep -Seconds 2
                try {
                    $response = Invoke-WebRequest -Uri "http://localhost:5003/health" -TimeoutSec 5 -UseBasicParsing
                    $serviceRunning = $response.StatusCode -eq 200
                } catch {
                    $serviceRunning = $false
                }
                $attempts++
            } while (-not $serviceRunning -and $attempts -lt 15)
            
            if (-not $serviceRunning) {
                Write-TestResult "D√©marrage service" $false "Service ne d√©marre pas dans les temps"
                return
            }
        }
        
        Write-TestResult "Service disponible" $true "API accessible sur port 5003"
        
        # Ex√©cuter tests d'int√©gration
        $integrationTestPath = Join-Path $testsRoot "Integration"
        if (Test-Path $integrationTestPath) {
            $verbosityLevel = if ($Verbose) { "normal" } else { "minimal" }
            $result = dotnet test $integrationTestPath --verbosity $verbosityLevel --logger "console;verbosity=minimal"
            
            if ($LASTEXITCODE -eq 0) {
                Write-TestResult "Tests d'int√©gration" $true "Tous les tests d'int√©gration passent"
            } else {
                Write-TestResult "Tests d'int√©gration" $false "Certains tests d'int√©gration √©chouent"
            }
        } else {
            Write-TestResult "Tests d'int√©gration" $false "R√©pertoire des tests d'int√©gration introuvable"
        }
        
        # Nettoyer le processus si on l'a d√©marr√©
        if ($serviceProcess) {
            Stop-Process -Id $serviceProcess.Id -Force -ErrorAction SilentlyContinue
        }
    }
    catch {
        Write-TestResult "Tests d'int√©gration" $false $_.Exception.Message
    }
}

# Test 5: Tests de performance de base
if ($TestType -eq "all" -or $TestType -eq "performance") {
    Write-TestHeader "TESTS DE PERFORMANCE"
    
    try {
        Write-Host "   ‚ö° Ex√©cution du testeur de service..." -ForegroundColor Gray
        $perfResult = & "$rootPath\tools\catalog-service-tester.ps1" 2>&1
        
        if ($perfResult -like "*Taux de succ√®s*") {
            Write-TestResult "Tests de performance" $true "Service r√©pond dans les temps acceptables"
        } else {
            Write-TestResult "Tests de performance" $false "Performance insuffisante ou service indisponible"
        }
    }
    catch {
        Write-TestResult "Tests de performance" $false $_.Exception.Message
    }
}

# Rapport final
Write-Host ""
Write-Host "üìä RAPPORT FINAL DES TESTS" -ForegroundColor Magenta
Write-Host "===========================" -ForegroundColor Magenta
Write-Host "Total des tests    : $totalTests" -ForegroundColor White
Write-Host "Tests r√©ussis      : $passedTests" -ForegroundColor Green
Write-Host "Tests √©chou√©s      : $failedTests" -ForegroundColor Red

if ($totalTests -gt 0) {
    $successRate = [math]::Round(($passedTests / $totalTests) * 100, 1)
    Write-Host "Taux de r√©ussite   : $successRate%" -ForegroundColor $(if ($successRate -ge 80) { "Green" } else { "Yellow" })
}

# Recommandations
Write-Host ""
if ($failedTests -eq 0) {
    Write-Host "üéâ Tous les tests passent ! Le service Catalog.API est pr√™t." -ForegroundColor Green
} elseif ($failedTests -le 2) {
    Write-Host "‚ö†Ô∏è  Quelques tests √©chouent. V√©rifiez les d√©tails ci-dessus." -ForegroundColor Yellow
} else {
    Write-Host "‚ùå Plusieurs tests √©chouent. Action corrective requise." -ForegroundColor Red
}

# G√©n√©ration du rapport de couverture
if ($Coverage) {
    Write-Host ""
    Write-Host "üìä G√âN√âRATION DU RAPPORT DE COUVERTURE" -ForegroundColor Cyan
    try {
        # Chercher le fichier de couverture le plus r√©cent
        $coverageFile = Get-ChildItem -Path "." -Recurse -Filter "coverage.cobertura.xml" | Sort-Object LastWriteTime -Descending | Select-Object -First 1
        
        if ($coverageFile) {
            Write-Host "   ‚úÖ Rapport de couverture g√©n√©r√© : $($coverageFile.FullName)" -ForegroundColor Green
        } else {
            Write-Host "   ‚ö†Ô∏è  Fichier de couverture non trouv√©" -ForegroundColor Yellow
        }
    }
    catch {
        Write-Host "   ‚ùå Erreur lors de la g√©n√©ration du rapport de couverture" -ForegroundColor Red
    }
}

Write-Host ""
Write-Host "Tests termin√©s √† $(Get-Date -Format 'HH:mm:ss')" -ForegroundColor Gray

# Code de sortie bas√© sur les r√©sultats
if ($failedTests -eq 0) {
    exit 0
} else {
    exit 1
}