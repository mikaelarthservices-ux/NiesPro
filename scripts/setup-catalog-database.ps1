# ===============================================
# Script de Configuration Base de Donn√©es - Catalog.API
# ===============================================

Write-Host "=== CONFIGURATION DATABASE CATALOG.API ===" -ForegroundColor Cyan
Write-Host "Heure: $(Get-Date -Format 'HH:mm:ss')" -ForegroundColor Gray
Write-Host ""

$catalogDir = "src/Services/Catalog/Catalog.API"
$dbName = "niespro_catalog_dev"

# V√©rification des pr√©requis
Write-Host "üîç VERIFICATION PREREQUIS:" -ForegroundColor Yellow

# V√©rifier dotnet
try {
    $dotnetVersion = dotnet --version
    Write-Host "  ‚úÖ .NET CLI d√©tect√© (v$dotnetVersion)" -ForegroundColor Green
} catch {
    Write-Host "  ‚ùå .NET CLI non trouv√©" -ForegroundColor Red
    exit 1
}

# V√©rifier EF Tools
try {
    $efVersion = dotnet ef --version 2>$null
    if ($efVersion) {
        Write-Host "  ‚úÖ Entity Framework Tools d√©tect√©" -ForegroundColor Green
    } else {
        Write-Host "  ‚ö†Ô∏è  EF Tools non install√©, installation..." -ForegroundColor Yellow
        dotnet tool install --global dotnet-ef
        Write-Host "  ‚úÖ Entity Framework Tools install√©" -ForegroundColor Green
    }
} catch {
    Write-Host "  ‚ö†Ô∏è  Installation EF Tools..." -ForegroundColor Yellow
    dotnet tool install --global dotnet-ef
}

# V√©rifier MySQL
Write-Host "`nüóÑÔ∏è  VERIFICATION MYSQL:" -ForegroundColor Yellow
$mysqlProcess = Get-Process | Where-Object { $_.ProcessName -like "*mysql*" }
if ($mysqlProcess) {
    Write-Host "  ‚úÖ MySQL actif (PID: $($mysqlProcess.Id -join ', '))" -ForegroundColor Green
} else {
    Write-Host "  ‚ùå MySQL non d√©tect√©" -ForegroundColor Red
    Write-Host "     üí° D√©marrez WAMP/XAMPP avant de continuer" -ForegroundColor Yellow
    
    $continue = Read-Host "Continuer quand m√™me? (y/N)"
    if ($continue -ne "y" -and $continue -ne "Y") {
        exit 1
    }
}

# Navigation vers le r√©pertoire du projet
if (Test-Path $catalogDir) {
    Write-Host "`nüìÅ Navigation vers $catalogDir" -ForegroundColor Cyan
    Push-Location $catalogDir
} else {
    Write-Host "‚ùå R√©pertoire $catalogDir non trouv√©" -ForegroundColor Red
    exit 1
}

try {
    # V√©rification des migrations existantes
    Write-Host "`nüîç VERIFICATION MIGRATIONS:" -ForegroundColor Yellow
    $migrations = dotnet ef migrations list 2>$null
    if ($migrations) {
        Write-Host "  ‚úÖ Migrations trouv√©es:" -ForegroundColor Green
        $migrations | ForEach-Object { Write-Host "    - $_" -ForegroundColor White }
    } else {
        Write-Host "  ‚ö†Ô∏è  Aucune migration trouv√©e" -ForegroundColor Yellow
    }

    # V√©rification de la base de donn√©es
    Write-Host "`nüóÑÔ∏è  VERIFICATION BASE DE DONNEES:" -ForegroundColor Yellow
    try {
        $dbInfo = dotnet ef database list 2>$null
        Write-Host "  ‚úÖ Connexion √† la base de donn√©es √©tablie" -ForegroundColor Green
    } catch {
        Write-Host "  ‚ö†Ô∏è  Probl√®me de connexion base de donn√©es" -ForegroundColor Yellow
    }

    # Application des migrations
    Write-Host "`n‚ö° APPLICATION MIGRATIONS:" -ForegroundColor Yellow
    Write-Host "  üöÄ Ex√©cution de 'dotnet ef database update'..." -ForegroundColor Cyan
    
    $updateResult = dotnet ef database update 2>&1
    
    if ($LASTEXITCODE -eq 0) {
        Write-Host "  ‚úÖ Migrations appliqu√©es avec succ√®s!" -ForegroundColor Green
        Write-Host "  üìä Base de donn√©es '$dbName' cr√©√©e/mise √† jour" -ForegroundColor Green
    } else {
        Write-Host "  ‚ùå Erreur lors de l'application des migrations:" -ForegroundColor Red
        Write-Host $updateResult -ForegroundColor Red
        
        # Diagnostic suppl√©mentaire
        Write-Host "`nüîß DIAGNOSTIC:" -ForegroundColor Yellow
        if ($updateResult -like "*Base*inconnue*" -or $updateResult -like "*database*does not exist*") {
            Write-Host "  üí° La base de donn√©es n'existe pas, tentative de cr√©ation..." -ForegroundColor Yellow
            
            # Tentative de cr√©ation de la base avec un script SQL
            $createDbScript = @"
CREATE DATABASE IF NOT EXISTS ``$dbName`` 
CHARACTER SET utf8mb4 
COLLATE utf8mb4_unicode_ci;
"@
            
            Write-Host "  üìù Cr√©ation de la base '$dbName'..." -ForegroundColor Cyan
            $createDbScript | mysql -u root
            
            if ($LASTEXITCODE -eq 0) {
                Write-Host "  ‚úÖ Base de donn√©es cr√©√©e, nouvelle tentative de migration..." -ForegroundColor Green
                $retryResult = dotnet ef database update 2>&1
                if ($LASTEXITCODE -eq 0) {
                    Write-Host "  ‚úÖ Migrations appliqu√©es avec succ√®s!" -ForegroundColor Green
                } else {
                    Write-Host "  ‚ùå √âchec de la deuxi√®me tentative:" -ForegroundColor Red
                    Write-Host $retryResult -ForegroundColor Red
                }
            } else {
                Write-Host "  ‚ùå √âchec de la cr√©ation de la base de donn√©es" -ForegroundColor Red
                Write-Host "     üí° V√©rifiez que MySQL est d√©marr√© et accessible" -ForegroundColor Yellow
            }
        }
    }

    # Test de validation
    Write-Host "`n‚úÖ VALIDATION:" -ForegroundColor Yellow
    Write-Host "  üß™ Test de connexion √† l'API..." -ForegroundColor Cyan
    
    # Lancer temporairement l'API pour tester
    Start-Job -ScriptBlock { 
        Set-Location $using:PWD
        dotnet run --no-build > $null 2>&1 
    } -Name "CatalogAPITest" | Out-Null
    
    Start-Sleep -Seconds 5
    
    try {
        $testResponse = Invoke-RestMethod -Uri "http://localhost:5003/api/v1/Categories" -Method GET -TimeoutSec 10
        if ($testResponse.success -or $testResponse.success -eq $false) {
            Write-Host "  ‚úÖ API r√©pond correctement!" -ForegroundColor Green
        } else {
            Write-Host "  ‚ö†Ô∏è  API r√©pond mais format inattendu" -ForegroundColor Yellow
        }
    } catch {
        if ($_.Exception.Message -notlike "*Base*inconnue*") {
            Write-Host "  ‚úÖ API d√©marr√©e (erreur non-DB d√©tect√©e)" -ForegroundColor Green
        } else {
            Write-Host "  ‚ùå Probl√®me de base de donn√©es persistent" -ForegroundColor Red
        }
    }
    
    # Arr√™ter le job de test
    Get-Job -Name "CatalogAPITest" | Stop-Job | Remove-Job

} finally {
    Pop-Location
}

Write-Host "`nüéâ CONFIGURATION TERMINEE!" -ForegroundColor Green
Write-Host "`nüìã ETAPES COMPLETEES:" -ForegroundColor Cyan
Write-Host "  - V√©rification des outils .NET/EF" -ForegroundColor White
Write-Host "  - V√©rification MySQL" -ForegroundColor White
Write-Host "  - Application des migrations Entity Framework" -ForegroundColor White
Write-Host "  - Cr√©ation/mise √† jour base '$dbName'" -ForegroundColor White
Write-Host "  - Test de validation API" -ForegroundColor White

Write-Host "`nüí° PROCHAINES ETAPES:" -ForegroundColor Yellow
Write-Host "  1. D√©marrer Catalog.API: dotnet run --project $catalogDir" -ForegroundColor White
Write-Host "  2. Tester l'API: tests/Scripts/test-catalog-diagnostic.ps1" -ForegroundColor White
Write-Host "  3. Tests complets: tests/Scripts/test-catalog-final.ps1" -ForegroundColor White