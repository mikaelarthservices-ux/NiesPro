# ===============================================
# SCRIPT DE D√âPLOIEMENT PRODUCTION NIESPRO ERP
# ===============================================

Write-Host "üöÄ D√âPLOIEMENT PRODUCTION NIESPRO ERP" -ForegroundColor Green
Write-Host "====================================" -ForegroundColor Green

# V√©rification des pr√©requis
Write-Host ""
Write-Host "üìã V√âRIFICATION DES PR√âREQUIS" -ForegroundColor Yellow

# Docker
try {
    $dockerVersion = docker --version
    Write-Host "‚úÖ Docker: $dockerVersion" -ForegroundColor Green
}
catch {
    Write-Host "‚ùå Docker n'est pas install√© ou accessible" -ForegroundColor Red
    exit 1
}

# Docker Compose
try {
    $dockerComposeVersion = docker compose version
    Write-Host "‚úÖ Docker Compose: $dockerComposeVersion" -ForegroundColor Green
}
catch {
    Write-Host "‚ùå Docker Compose n'est pas install√© ou accessible" -ForegroundColor Red
    exit 1
}

# V√©rification du fichier .env
if (Test-Path ".env.production") {
    Write-Host "‚úÖ Fichier de configuration .env.production trouv√©" -ForegroundColor Green
}
else {
    Write-Host "‚ö†Ô∏è  Fichier .env.production non trouv√©. Utilisation des valeurs par d√©faut." -ForegroundColor Yellow
}

Write-Host ""
Write-Host "üîß PR√âPARATION DE L'ENVIRONNEMENT" -ForegroundColor Yellow

# Cr√©ation des r√©pertoires de logs
$logDirs = @("logs/auth", "logs/catalog", "logs/order", "logs/payment", "logs/stock", "logs/gateway")
foreach ($dir in $logDirs) {
    if (!(Test-Path $dir)) {
        New-Item -Path $dir -ItemType Directory -Force
        Write-Host "üìÅ R√©pertoire cr√©√©: $dir" -ForegroundColor Cyan
    }
}

# G√©n√©ration des certificats SSL pour le d√©veloppement
Write-Host ""
Write-Host "üîê CONFIGURATION SSL" -ForegroundColor Yellow
try {
    dotnet dev-certs https --clean
    dotnet dev-certs https --trust
    Write-Host "‚úÖ Certificats SSL configur√©s" -ForegroundColor Green
}
catch {
    Write-Host "‚ö†Ô∏è  Probl√®me avec les certificats SSL" -ForegroundColor Yellow
}

Write-Host ""
Write-Host "üèóÔ∏è  CONSTRUCTION DES IMAGES DOCKER" -ForegroundColor Yellow

# Arr√™t des services existants
Write-Host "üõë Arr√™t des services existants..."
docker compose -f docker-compose.production.yml down

# Construction des images
Write-Host "üî® Construction des images Docker..."
docker compose -f docker-compose.production.yml build --no-cache

Write-Host ""
Write-Host "üöÄ D√âMARRAGE DES SERVICES" -ForegroundColor Yellow

# D√©marrage de l'infrastructure (base de donn√©es)
Write-Host "üìä D√©marrage de l'infrastructure..."
docker compose -f docker-compose.production.yml up -d mysql redis

# Attente de la disponibilit√© de MySQL
Write-Host "‚è≥ Attente de la disponibilit√© de MySQL..."
$maxAttempts = 30
$attempt = 0
do {
    Start-Sleep -Seconds 10
    $attempt++
    $mysqlReady = docker compose -f docker-compose.production.yml exec mysql mysqladmin ping -h localhost --silent
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ MySQL est pr√™t" -ForegroundColor Green
        break
    }
    Write-Host "‚è≥ Tentative $attempt/$maxAttempts..." -ForegroundColor Yellow
} while ($attempt -lt $maxAttempts)

if ($attempt -eq $maxAttempts) {
    Write-Host "‚ùå MySQL n'est pas disponible apr√®s $maxAttempts tentatives" -ForegroundColor Red
    exit 1
}

# D√©marrage des microservices
Write-Host "üîÑ D√©marrage des microservices..."
docker compose -f docker-compose.production.yml up -d stock-api auth-api catalog-api order-api payment-api

# Attente que les services soient pr√™ts
Write-Host "‚è≥ Attente de la disponibilit√© des microservices..."
Start-Sleep -Seconds 30

# D√©marrage du gateway
Write-Host "üåê D√©marrage de l'API Gateway..."
docker compose -f docker-compose.production.yml up -d gateway-api

# D√©marrage du monitoring
Write-Host "üìä D√©marrage du monitoring..."
docker compose -f docker-compose.production.yml up -d prometheus grafana elasticsearch kibana

Write-Host ""
Write-Host "üîç V√âRIFICATION DES SERVICES" -ForegroundColor Yellow

# Test des endpoints de sant√©
$services = @(
    @{ Name = "Stock API"; Url = "http://localhost:5005/health" },
    @{ Name = "Auth API"; Url = "http://localhost:5001/health" },
    @{ Name = "Catalog API"; Url = "http://localhost:5003/health" },
    @{ Name = "Order API"; Url = "http://localhost:5002/health" },
    @{ Name = "Payment API"; Url = "http://localhost:5004/health" },
    @{ Name = "Gateway"; Url = "http://localhost:5000/health" }
)

foreach ($service in $services) {
    try {
        $response = Invoke-WebRequest -Uri $service.Url -UseBasicParsing -TimeoutSec 10
        if ($response.StatusCode -eq 200) {
            Write-Host "‚úÖ $($service.Name): Op√©rationnel" -ForegroundColor Green
        }
        else {
            Write-Host "‚ö†Ô∏è  $($service.Name): Status $($response.StatusCode)" -ForegroundColor Yellow
        }
    }
    catch {
        Write-Host "‚ùå $($service.Name): Non accessible" -ForegroundColor Red
    }
}

Write-Host ""
Write-Host "üìã R√âSUM√â DU D√âPLOIEMENT" -ForegroundColor Green
Write-Host "========================" -ForegroundColor Green
Write-Host ""
Write-Host "üåê URLs des services:"
Write-Host "  ‚Ä¢ Gateway HTTP:     http://localhost:5000" -ForegroundColor Cyan
Write-Host "  ‚Ä¢ Gateway HTTPS:    https://localhost:5010" -ForegroundColor Cyan
Write-Host "  ‚Ä¢ Auth API:         http://localhost:5001" -ForegroundColor Cyan
Write-Host "  ‚Ä¢ Catalog API:      http://localhost:5003" -ForegroundColor Cyan
Write-Host "  ‚Ä¢ Order API:        http://localhost:5002" -ForegroundColor Cyan
Write-Host "  ‚Ä¢ Payment API:      http://localhost:5004" -ForegroundColor Cyan
Write-Host "  ‚Ä¢ Stock API:        http://localhost:5005" -ForegroundColor Cyan
Write-Host ""
Write-Host "üìä Monitoring:"
Write-Host "  ‚Ä¢ Prometheus:       http://localhost:9090" -ForegroundColor Cyan
Write-Host "  ‚Ä¢ Grafana:          http://localhost:3000 (admin/NiesPro2024!)" -ForegroundColor Cyan
Write-Host "  ‚Ä¢ Kibana:           http://localhost:5601" -ForegroundColor Cyan
Write-Host ""
Write-Host "üìä Base de donn√©es:"
Write-Host "  ‚Ä¢ MySQL:            localhost:3306 (root/NiesPro2024!)" -ForegroundColor Cyan
Write-Host "  ‚Ä¢ Redis:            localhost:6379" -ForegroundColor Cyan
Write-Host ""
Write-Host "üéØ D√©ploiement termin√© avec succ√®s!" -ForegroundColor Green
Write-Host ""
Write-Host "üîß Commandes utiles:"
Write-Host "  ‚Ä¢ Logs:             docker compose -f docker-compose.production.yml logs -f [service]" -ForegroundColor Gray
Write-Host "  ‚Ä¢ Status:           docker compose -f docker-compose.production.yml ps" -ForegroundColor Gray
Write-Host "  ‚Ä¢ Arr√™t:            docker compose -f docker-compose.production.yml down" -ForegroundColor Gray