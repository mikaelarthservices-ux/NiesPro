# =======================================================================
# CATALOG DATABASE SETUP - NiesPro
# Script pour cr√©er et initialiser la base de donn√©es Catalog
# =======================================================================

param(
    [switch]$Force,
    [switch]$Seed,
    [switch]$Reset,
    [string]$Environment = "Development"
)

Write-Host "üöÄ CATALOG DATABASE SETUP" -ForegroundColor Green
Write-Host "=========================" -ForegroundColor Green

$catalogPath = "C:\Users\HP\Documents\projets\NiesPro\src\Services\Catalog\Catalog.API"

# V√©rifier que le projet existe
if (-not (Test-Path $catalogPath)) {
    Write-Host "‚ùå Projet Catalog.API non trouv√©: $catalogPath" -ForegroundColor Red
    exit 1
}

# Changer vers le r√©pertoire du projet
Set-Location $catalogPath
Write-Host "üìÅ R√©pertoire de travail: $catalogPath" -ForegroundColor Cyan

# Fonction pour ex√©cuter une commande dotnet
function Invoke-DotnetCommand {
    param([string]$Command, [string]$Description)
    
    Write-Host "üîß $Description..." -ForegroundColor Yellow
    Write-Host "   Commande: dotnet $Command" -ForegroundColor Gray
    
    try {
        $commandArgs = $Command.Split(' ')
        $result = & dotnet $commandArgs 2>&1
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ $Description r√©ussi" -ForegroundColor Green
            if ($result) {
                Write-Host $result -ForegroundColor White
            }
            return $true
        } else {
            Write-Host "‚ùå $Description √©chou√©" -ForegroundColor Red
            Write-Host $result -ForegroundColor Red
            return $false
        }
    }
    catch {
        Write-Host "‚ùå Erreur lors de $Description : $($_.Exception.Message)" -ForegroundColor Red
        return $false
    }
}

# √âtape 1: Compilation du projet
Write-Host "`nüì¶ √âTAPE 1: Compilation du projet" -ForegroundColor Magenta
if (-not (Invoke-DotnetCommand "build --no-restore" "Compilation")) {
    Write-Host "‚ùå Impossible de continuer sans compilation r√©ussie" -ForegroundColor Red
    exit 1
}

# √âtape 2: V√©rification des migrations
Write-Host "`nüîç √âTAPE 2: V√©rification des migrations" -ForegroundColor Magenta
$migrationsPath = "Migrations"
if (Test-Path $migrationsPath) {
    $migrations = Get-ChildItem $migrationsPath -Filter "*.cs" | Measure-Object
    Write-Host "‚úÖ $($migrations.Count) fichiers de migration trouv√©s" -ForegroundColor Green
} else {
    Write-Host "‚ö†Ô∏è  Aucun dossier de migration trouv√©" -ForegroundColor Yellow
    Write-Host "üîß Cr√©ation de la migration initiale..." -ForegroundColor Yellow
    if (-not (Invoke-DotnetCommand "ef migrations add InitialCreate --project ../Catalog.Infrastructure --startup-project ." "Cr√©ation migration initiale")) {
        Write-Host "‚ùå √âchec de cr√©ation de la migration" -ForegroundColor Red
        exit 1
    }
}

# √âtape 3: Reset de la base de donn√©es si demand√©
if ($Reset) {
    Write-Host "`nüóëÔ∏è  √âTAPE 3: Reset de la base de donn√©es" -ForegroundColor Magenta
    Write-Host "‚ö†Ô∏è  ATTENTION: Ceci va supprimer toutes les donn√©es!" -ForegroundColor Red
    
    if ($Force) {
        $confirm = "y"
    } else {
        $confirm = Read-Host "√ätes-vous s√ªr de vouloir reset la base? (y/N)"
    }
    
    if ($confirm -eq "y" -or $confirm -eq "Y") {
        Invoke-DotnetCommand "ef database drop --force" "Suppression de la base existante"
    } else {
        Write-Host "‚è≠Ô∏è  Reset annul√©" -ForegroundColor Yellow
    }
}

# √âtape 4: Application des migrations
Write-Host "`n‚ö° √âTAPE 4: Application des migrations" -ForegroundColor Magenta
if (-not (Invoke-DotnetCommand "ef database update --project ../Catalog.Infrastructure --startup-project ." "Application des migrations")) {
    Write-Host "‚ùå √âchec de l'application des migrations" -ForegroundColor Red
    
    # Diagnostic
    Write-Host "`nüîç DIAGNOSTIC:" -ForegroundColor Yellow
    Write-Host "1. V√©rifiez que MySQL est d√©marr√©" -ForegroundColor Cyan
    Write-Host "2. V√©rifiez la cha√Æne de connexion dans appsettings.json" -ForegroundColor Cyan
    Write-Host "3. V√©rifiez que la base 'niespro_catalog_dev' peut √™tre cr√©√©e" -ForegroundColor Cyan
    
    exit 1
}

# √âtape 5: V√©rification de la base cr√©√©e
Write-Host "`n‚úÖ √âTAPE 5: V√©rification de la base cr√©√©e" -ForegroundColor Magenta

# Utiliser notre script d'inspection
$inspectorPath = "C:\Users\HP\Documents\projets\NiesPro\tools\catalog-db-inspector.ps1"
if (Test-Path $inspectorPath) {
    Write-Host "üîç Test de connexion..." -ForegroundColor Yellow
    & $inspectorPath -Action "test"
    
    Write-Host "üìã Tables cr√©√©es..." -ForegroundColor Yellow  
    & $inspectorPath -Action "tables"
} else {
    Write-Host "‚ö†Ô∏è  Script d'inspection non trouv√©, v√©rification manuelle recommand√©e" -ForegroundColor Yellow
}

# √âtape 6: Initialisation des donn√©es (seed) si demand√©
if ($Seed) {
    Write-Host "`nüå± √âTAPE 6: Initialisation des donn√©es de test" -ForegroundColor Magenta
    
    # Les donn√©es de seed sont normalement dans les migrations ou via DbContext
    Write-Host "‚ÑπÔ∏è  Les donn√©es initiales sont appliqu√©es via les migrations" -ForegroundColor Cyan
    Write-Host "üìä V√©rification des donn√©es..." -ForegroundColor Yellow
    
    if (Test-Path $inspectorPath) {
        & $inspectorPath -Action "counts"
    }
}

# √âtape 7: R√©sum√© final
Write-Host "`nüéâ SETUP TERMIN√â!" -ForegroundColor Green
Write-Host "=================" -ForegroundColor Green
Write-Host "Base de donn√©es: niespro_catalog_dev" -ForegroundColor Cyan
Write-Host "Environnement: $Environment" -ForegroundColor Cyan
Write-Host ""
Write-Host "üîß Commandes utiles:" -ForegroundColor Yellow
Write-Host "- Inspecter la base: tools\catalog-db-inspector.ps1" -ForegroundColor White
Write-Host "- D√©marrer le service: dotnet run (dans $catalogPath)" -ForegroundColor White
Write-Host "- Swagger UI: https://localhost:5013/swagger" -ForegroundColor White
Write-Host ""
Write-Host "üìä Pour v√©rifier les donn√©es:" -ForegroundColor Yellow
Write-Host "tools\catalog-db-inspector.ps1 -Action counts" -ForegroundColor White